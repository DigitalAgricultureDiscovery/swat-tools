"""
Django settings for swatapps project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from logging.config import dictConfig
from pathlib import Path

from .logging_config import get_logging_config


# Admins (name, email)

ADMINS = [admin.split(',') for admin in os.environ['ADMINS'].split(';')]


# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = str(Path(__file__).resolve().parent)
PROJECT_DIR = str(Path(__file__).parents[1])
LOGS_DIR = os.environ.get('LOGS_DIR')
SETTINGS_DIR = os.path.dirname(__file__)
USER_UPLOAD_DIR = os.path.join(PROJECT_DIR, 'user_data', 'uploads')
USER_RESULT_DIR = os.path.join(PROJECT_DIR, 'user_data', 'results')


# SECURITY WARNING: keep the secret key used in production secret!

DEBUG = int(os.environ.get('DEBUG', default=0))
SECRET_KEY = os.environ.get('SECRET_KEY')
AWS_ACCESS_KEY = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_ACCESS_SECRET = os.environ.get('AWS_SECRET_ACCESS_KEY')
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS').split(';')

# Production session settings

if not DEBUG:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_AGE = 1209600  # Two weeks
    SESSION_EXPIRE_AT_BROWSER_CLOSE = True
    SESSION_SAVE_EVERY_REQUEST = True


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap3',
    'fieldswat',
    'luuchecker',
    's3upload',
    'swatluu',
    'swatusers',
    'templates',
    'uncertainty',
    'common',
    'gmailapi_backend'
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'swatapps.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(PROJECT_DIR, 'templates').replace('\\', '/'),
            os.path.join(PROJECT_DIR, 's3direct/templates').replace('\\', '/')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # custom
                'swatapps.context_processors.gtag_ga4_processor',
                'swatapps.context_processors.gtag_ua_processor'
            ],
        },
    },
]

WSGI_APPLICATION = 'swatapps.wsgi.application'


# Celery

BROKER_URL = os.environ.get('REDIS_HOST_PORT')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_HIJACK_ROOT_LOGGER = False


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': os.environ.get('MYSQL_HOST'),
        'NAME': os.environ.get('MYSQL_DATABASE'),
        'USER': os.environ.get('MYSQL_USER'),
        'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
        'PORT': os.environ.get('MYSQL_PORT')
    }
}


# Logging
dictConfig(get_logging_config(LOGS_DIR))


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Media files

MEDIA_ROOT = USER_UPLOAD_DIR
MEDIA_URL = '/media/'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = os.path.join(PROJECT_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(PROJECT_DIR, 'static_storage'),)


# User model
AUTH_USER_MODEL = 'swatusers.SwatUser'
AUTHENTICATION_BACKENDS = [
    'swatusers.backends.EmailAuthBackend',
    'django.contrib.auth.backends.ModelBackend'
]


# File upload settings
FILE_UPLOAD_TEMP_DIR = '/tmp'
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o775
FILE_UPLOAD_PERMISSIONS = 0o664


# Login URL
LOGIN_URL = '/login'


# Cloudflare Turnstile site/secret keys
TURNSTILE_SITE_KEY = os.environ.get('TURNSTILE_SITE_KEY')
TURNSTILE_SECRET_KEY = os.environ.get('TURNSTILE_SECRET_KEY')


# Email
EMAIL_BACKEND = 'gmailapi_backend.mail.GmailBackend'

GMAIL_API_CLIENT_ID = os.environ.get('EMAIL_CLIENT_ID')
GMAIL_API_CLIENT_SECRET = os.environ.get('EMAIL_CLIENT_SECRET')
GMAIL_API_REFRESH_TOKEN = os.environ.get('EMAIL_REFRESH_TOKEN')

# API key
APIKEY = os.environ.get('API_KEY')


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
